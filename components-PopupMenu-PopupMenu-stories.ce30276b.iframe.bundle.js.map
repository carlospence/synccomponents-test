{"version":3,"file":"components-PopupMenu-PopupMenu-stories.ce30276b.iframe.bundle.js","mappings":";;;;;;;;;AAuBA;;;;;;AAQA;;;;;;;AASA;;;AAKA;;;AAKA;;AAIA","sources":["webpack://@carlospence/synccomponents-test/./src/components/PopupMenu/PopupMenu.tsx"],"sourcesContent":["import React, {\n    cloneElement,\n    CSSProperties,\n    MutableRefObject,\n    ReactElement,\n    useEffect,\n    useRef,\n    useState\n  } from \"react\";\n  import { PopupMenuProps, PopupMenuChild } from \"./PopupMenu.types\";\n  import styled, { keyframes } from \"styled-components\";\n  \n  const revealOptions = keyframes`\n    from {\n      opacity: 0;\n      transform: scale(0.5);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  `;\n  \n  const fadeScrimIn = keyframes`\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }`;\n  \n  const PopupMenuScrim = styled.div.attrs(props => ({\n    className: \"react-simple-widget popup-menu-scrim \" + props.className\n  }))`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--rsw-popup-menu-scrim-bg-color);\n    animation: ${fadeScrimIn} var(--rsw-transition-duration) ease-out forwards;\n    overflow: auto;\n    z-index: 2;\n  `;\n  \n  const PopupMenuOptions = styled.div.attrs(props => ({\n    className: \"react-simple-widget popup-menu-options \" + props.className\n  }))`\n    position: fixed;\n    width: max-content !important;\n    animation: ${revealOptions} var(--rsw-transition-duration) ease-out forwards;\n    z-index: 3;\n  `;\n  \n  export const PopupMenu = ({ children }: PopupMenuProps): JSX.Element => {\n    const UNKNOWN_RIGHT_OFFSET_PERCENTAGE = 0.06;\n  \n    const [optionsOpened, setOptionsOpened] = useState(false);\n    const [optionsCssProperties, setOptionsCssProperties] =\n      useState<CSSProperties>({});\n    const [triggerButton, optionsMenu] = children as Array<PopupMenuChild>;\n    const triggerRef: MutableRefObject<HTMLDivElement | null> = useRef(null);\n    const optionsRef: MutableRefObject<HTMLDivElement | null> = useRef(null);\n    const [firstAlignmentPass, setFirstAlignmentPass] = useState(false);\n    const optionsMenuIsFunction = typeof optionsMenu === \"function\";\n  \n    const toggle = (): void => {\n      setOptionsOpened(!optionsOpened);\n      // If trigger button originally had an onClick, call it also\n      const onClick: Function = (triggerButton as ReactElement).props.onClick;\n      if (onClick) onClick();\n    };\n  \n    const alignOptionsMenu = (): void => {\n\n      if (triggerRef.current !== undefined && triggerRef.current !== null \n        && optionsRef.current !== undefined && optionsRef.current !== null){\n        const {\n          left: tLeft,\n          right: tRight,\n          bottom: tBottom,\n          top: tTop\n        } = triggerRef.current.getBoundingClientRect();\n        const { right: oRight } = optionsRef.current.getBoundingClientRect();\n    \n        const heightAboveTrigger = tBottom;\n        const heightBelowTrigger = window.innerHeight - tTop;\n        const optionsHeight = optionsRef.current.scrollHeight;\n        const optionIsTallerThanWindow = optionsHeight > window.innerHeight;\n        const displayOptionsBelowTrigger = optionsHeight <= heightBelowTrigger;\n        const displayOptionsAboveTrigger = optionsHeight < heightAboveTrigger;\n        const optionsIsCutoffAtRight =\n          oRight + UNKNOWN_RIGHT_OFFSET_PERCENTAGE * document.body.clientWidth >\n          document.body.clientWidth;\n        const optionsTransformOrigin = [0, 0];\n        const properties: CSSProperties = {};\n    \n        if (optionIsTallerThanWindow) {\n          properties.top = 0;\n          properties.bottom = 0;\n          properties.overflow = \"auto\";\n    \n          if (optionsIsCutoffAtRight) {\n            optionsTransformOrigin[0] = 100;\n            properties.right = document.body.clientWidth - tRight;\n          } else {\n            optionsTransformOrigin[0] = 0;\n            properties.left = tLeft;\n          }\n        } else {\n          if (optionsIsCutoffAtRight) {\n            optionsTransformOrigin[0] = 100;\n            properties.right = document.body.clientWidth - tRight;\n          } else {\n            optionsTransformOrigin[0] = 0;\n            properties.left = tLeft;\n          }\n    \n          if (displayOptionsBelowTrigger) {\n            properties.top = tTop;\n            optionsTransformOrigin[1] = 0;\n          } else if (displayOptionsAboveTrigger) {\n            properties.bottom = window.innerHeight - tBottom;\n            optionsTransformOrigin[1] = 100;\n          }\n        }\n    \n        properties.transformOrigin = `${optionsTransformOrigin[0]}% ${optionsTransformOrigin[1]}%`;\n        setOptionsCssProperties(properties);\n      }\n      \n    };\n  \n    useEffect(() => {\n      const onScroll = (): void => {\n        setOptionsOpened(false);\n      };\n  \n      if (optionsOpened) {\n        window.addEventListener(\"scroll\", onScroll);\n        document.addEventListener(\"scroll\", onScroll);\n        document.body.addEventListener(\"scroll\", onScroll);\n      }\n  \n      return () => {\n        window.removeEventListener(\"scroll\", onScroll);\n        document.removeEventListener(\"scroll\", onScroll);\n        document.body.removeEventListener(\"scroll\", onScroll);\n      };\n    }, [optionsOpened]);\n  \n    useEffect(() => {\n      if (optionsOpened && optionsRef.current) {\n        if (!firstAlignmentPass) setFirstAlignmentPass(true);\n        alignOptionsMenu();\n      } else {\n        setOptionsCssProperties({});\n        setFirstAlignmentPass(false);\n      }\n    }, [optionsOpened]);\n  \n    useEffect(() => {\n      if (firstAlignmentPass) {\n        alignOptionsMenu();\n      }\n    }, [firstAlignmentPass]);\n  \n    return (\n      <React.Fragment>\n        {cloneElement(triggerButton as ReactElement, {\n          ref: triggerRef,\n          onClick: toggle\n        })}\n  \n        {optionsOpened && <PopupMenuScrim onClick={toggle} />}\n  \n        {optionsOpened && optionsMenu && (\n          <PopupMenuOptions\n             ref={optionsRef}\n            // OnClick is set if optionsMenu is not a function\n            onClick={optionsMenuIsFunction ? () => {} : toggle}\n            style={optionsCssProperties}\n            >\n            {optionsMenuIsFunction\n              ? optionsMenu(() => setOptionsOpened(false))\n              : optionsMenu}\n          </PopupMenuOptions>\n        )}\n      </React.Fragment>\n    );\n  };\n  "],"names":[],"sourceRoot":""}