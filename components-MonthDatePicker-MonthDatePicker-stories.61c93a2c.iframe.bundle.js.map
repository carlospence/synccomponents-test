{"version":3,"file":"components-MonthDatePicker-MonthDatePicker-stories.61c93a2c.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4EA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;ACrDA;;;;;;AAQA;;;;;;;AASA;;;AAKA;;;AAKA;;AAIA","sources":["webpack://@carlospence/synccomponents-test/./src/components/MonthDatePicker/MonthDatePicker.tsx","webpack://@carlospence/synccomponents-test/./src/components/FieldDecoration/FieldDecoration.tsx","webpack://@carlospence/synccomponents-test/./src/components/PopupMenu/PopupMenu.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { MonthDatePickerProps } from \"./MonthDatePicker.types\";\nimport { dateMonth, dateYear, months, years } from \"../../utils/calendarUtils\";\nimport arraySupport from \"dayjs/plugin/arraySupport\";\nimport djs from \"dayjs\";\nimport { PopupMenu } from \"../PopupMenu/PopupMenu\";\nimport { FieldDecoration } from \"../FieldDecoration/FieldDecoration\";\nimport advancedFormat from \"dayjs/plugin/advancedFormat\";\nimport styled from \"styled-components\";\n\ndjs.extend(arraySupport);\ndjs.extend(advancedFormat);\n\nconst MonthDatePickerRoot = styled.div.attrs(props => ({\n  className: \"react-simple-widget month-date-picker \" + props.className\n}))``;\n\nconst MonthDatePickerPopupRoot = styled.div.attrs(props => ({\n  className: \"react-simple-widget month-date-picker-popup \" + props.className\n}))`\n  header {\n    p {\n      font-weight: 400;\n      text-transform: uppercase;\n      font-size: 12px;\n      letter-spacing: 2px;\n    }\n\n    button {\n      i {\n        color: var(--rsw-primary-color);\n      }\n    }\n  }\n\n  select {\n    display: inline-block;\n    width: auto;\n    background-color: transparent;\n  }\n\n  .month-select {\n    display: grid;\n    grid-template-columns: repeat(4, 25%);\n\n    button {\n      transition: background-color var(--rsw-transition-duration);\n      white-space: nowrap;\n      border-radius: 2px;\n    }\n\n    button:focus,\n    button:hover {\n      outline: none;\n      box-shadow: none;\n    }\n\n    button.active {\n      background-color: var(--rsw-primary-color);\n      color: white;\n      font-weight: bold;\n      border-radius: 25%\n    }\n  }\n\n  .month-date-picker-error {\n    text-align: center;\n    margin-top: 12px;\n    padding-top: 12px;\n    font-size: 85%;\n    font-weight: bold;\n    color: var(--rsw-error-color);\n    border-top: 1px solid #e3e3e3;\n  }\n`;\n\nexport const MonthDatePicker = ({\n  value,\n  validator,\n  onChange,\n  ...rest\n}: MonthDatePickerProps): JSX.Element => {\n  const [displayYear, setDisplayYear] = useState(dateYear(value));\n  const [displayMonth, setDisplayMonth] = useState(dateMonth(value));\n  const [error, setError] = useState(null);\n\n  const monthBtnClassName = (active: boolean): string => {\n    const classes = [\"btn\", \"btn-link\", \"btn-sm\", \"text-decoration-none\"];\n    if (active) classes.push(\"active\");\n    return classes.join(\" \");\n  };\n\n  const resetDisplayDate = (): void => {\n    const current = djs();\n    setDisplayYear(current.year());\n    setDisplayMonth(current.month());\n  };\n\n  useEffect(() => {\n    onChange(djs([displayYear, displayMonth, 1]).format(\"YYYY-MM-DD\"));\n  }, [displayMonth, displayYear]);\n\n  return (\n    <PopupMenu>\n      <MonthDatePickerRoot {...rest}>\n        {djs([displayYear, displayMonth, 1]).format(\"MMMM YYYY\")}\n      </MonthDatePickerRoot>\n\n      {closePopup => (\n        <MonthDatePickerPopupRoot className=\"card\">\n          <div className=\"card-body\">\n            <header className=\"d-flex justify-content-between align-items-center mb-3\">\n              <p className=\"mb-0\">Select Date</p>\n\n              <button\n                type=\"button\"\n                className=\"btn btn-light btn-sm\"\n                onClick={resetDisplayDate}>\n                    {'\\u23F1'}{' '}\n                {/* <i className=\"fa fa-clock\" /> */}\n              </button>\n            </header>\n\n            <FieldDecoration label=\"Year\" className=\"mb-4\">\n              {({ onFieldFocus, onFieldBlur }) => (\n                <select\n                  value={displayYear}\n                  className=\"year-select\"\n                  onChange={e => setDisplayYear(parseInt(e.target.value))}\n                  onFocus={onFieldFocus}\n                  onBlur={onFieldBlur}>\n                  {years.map(year => (\n                    <option key={year} value={year}>\n                      {year}\n                    </option>\n                  ))}\n                </select>\n              )}\n            </FieldDecoration>\n\n            <div className=\"month-select\">\n              {months.map((month, monthIndex) => (\n                <button\n                  key={month}\n                  type=\"button\"\n                  className={monthBtnClassName(monthIndex === displayMonth)}\n                  onClick={() => {\n                    setDisplayMonth(monthIndex);\n\n                    if (validator) {\n                      const selectedDate = djs([\n                        displayYear,\n                        monthIndex,\n                        1\n                      ]).format(\"YYYY-MM-DD\");\n                      const error = validator(selectedDate);\n                      if (error) return setError(error);\n                      else setError(null);\n                    } else setError(null);\n\n                    closePopup();\n                  }}>\n                  {month.substring(0, 3)}\n                </button>\n              ))}\n            </div>\n\n            {error && <div className=\"month-date-picker-error\">{error}</div>}\n          </div>\n        </MonthDatePickerPopupRoot>\n      )}\n    </PopupMenu>\n  );\n};\n","import React, { useState, cloneElement } from \"react\";\nimport { FieldDecorationProps } from \"./FieldDecoration.types\";\nimport styled from \"styled-components\";\n\nconst FieldDecorationRoot = styled.div.attrs(props => ({\n  className: \"react-simple-widget field-decoration \" + props.className\n}))`\n  &.has-focus {\n    .field-decoration-content-container {\n      border-color: var(--rsw-primary-color);\n\n      > label {\n        color: var(--rsw-primary-color);\n      }\n    }\n  }\n\n  &.disabled {\n    opacity: 0.5;\n    pointer-events: none;\n\n    * {\n      pointer-events: none;\n    }\n  }\n\n  .field-decoration-content-container {\n    --border-width: 2px;\n\n    position: relative;\n    border-radius: 4px;\n    border: var(--border-width) solid var(--rsw-secondary-color);\n    padding: 8px 8px 4px;\n\n    > label {\n      position: absolute;\n      top: -10px;\n      left: 6px;\n      margin: 0;\n      padding: 0 4px;\n      font-size: 75%;\n      color: var(--rsw-label-color);\n      background-color: white;\n    }\n\n    > .field-decoration-content {\n      display: flex;\n      align-items: center;\n\n      > :not(.leading):not(.trailing) {\n        flex: 1 1;\n        width: 100%;\n        outline: none;\n        border: none;\n      }\n    }\n  }\n\n  > .field-decoration-footer {\n    display: flex;\n    padding: 0 10px;\n    justify-content: flex-end;\n\n    .helper,\n    .error {\n      margin: 0;\n      font-size: 75%;\n    }\n\n    .error {\n      color: var(--rsw-error-color);\n      flex: 1 1;\n    }\n  }\n`;\n\nexport const FieldDecoration = ({\n  label,\n  leading,\n  trailing,\n  error,\n  helper,\n  disabled,\n  children,\n  className,\n  ...rest\n}: FieldDecorationProps) => {\n  const [focused, setFocused] = useState(false);\n\n  const additionalClassNames = (): string => {\n    const classes = [];\n\n    if (className) classes.push(className);\n    if (leading) classes.push(\"has-leading\");\n    if (trailing) classes.push(\"has-trailing\");\n    if (focused) classes.push(\"has-focus\");\n    if (error) classes.push(\"has-error\");\n    if (helper) classes.push(\"has-helper\");\n    if (disabled) classes.push(\"disabled\");\n\n    return classes.join(\" \");\n  };\n\n  const child = children({\n    onFieldFocus: (): void => setFocused(true),\n    onFieldBlur: (): void => setFocused(false)\n  });\n\n  return (\n    <FieldDecorationRoot className={additionalClassNames()} {...rest}>\n      <div className=\"field-decoration-content-container\">\n        {label && <label>{label}</label>}\n\n        <div className=\"field-decoration-content\">\n          {leading &&\n            cloneElement(leading, {\n              className: `leading ${leading.props.className || \"\"}`,\n              disabled: disabled || leading.props.disabled\n            })}\n\n          {cloneElement(child, { disabled: disabled || child.props.disabled })}\n\n          {trailing &&\n            cloneElement(trailing, {\n              className: `leading ${trailing.props.className || \"\"}`,\n              disabled: disabled || trailing.props.disabled\n            })}\n        </div>\n      </div>\n\n      {(error || helper) && (\n        <div className=\"field-decoration-footer\">\n          {error && <div className=\"error\">{error}</div>}\n          {helper && <div className=\"helper\">{helper}</div>}\n        </div>\n      )}\n    </FieldDecorationRoot>\n  );\n};\n","import React, {\n    cloneElement,\n    CSSProperties,\n    MutableRefObject,\n    ReactElement,\n    useEffect,\n    useRef,\n    useState\n  } from \"react\";\n  import { PopupMenuProps, PopupMenuChild } from \"./PopupMenu.types\";\n  import styled, { keyframes } from \"styled-components\";\n  \n  const revealOptions = keyframes`\n    from {\n      opacity: 0;\n      transform: scale(0.5);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  `;\n  \n  const fadeScrimIn = keyframes`\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }`;\n  \n  const PopupMenuScrim = styled.div.attrs(props => ({\n    className: \"react-simple-widget popup-menu-scrim \" + props.className\n  }))`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: var(--rsw-popup-menu-scrim-bg-color);\n    animation: ${fadeScrimIn} var(--rsw-transition-duration) ease-out forwards;\n    overflow: auto;\n    z-index: 2;\n  `;\n  \n  const PopupMenuOptions = styled.div.attrs(props => ({\n    className: \"react-simple-widget popup-menu-options \" + props.className\n  }))`\n    position: fixed;\n    width: max-content !important;\n    animation: ${revealOptions} var(--rsw-transition-duration) ease-out forwards;\n    z-index: 3;\n  `;\n  \n  export const PopupMenu = ({ children }: PopupMenuProps): JSX.Element => {\n    const UNKNOWN_RIGHT_OFFSET_PERCENTAGE = 0.06;\n  \n    const [optionsOpened, setOptionsOpened] = useState(false);\n    const [optionsCssProperties, setOptionsCssProperties] =\n      useState<CSSProperties>(null);\n    const [triggerButton, optionsMenu] = children as Array<PopupMenuChild>;\n    const triggerRef: MutableRefObject<HTMLDivElement> = useRef();\n    const optionsRef: MutableRefObject<HTMLDivElement> = useRef();\n    const [firstAlignmentPass, setFirstAlignmentPass] = useState(false);\n    const optionsMenuIsFunction = typeof optionsMenu === \"function\";\n  \n    const toggle = (): void => {\n      setOptionsOpened(!optionsOpened);\n      // If trigger button originally had an onClick, call it also\n      const onClick: Function = (triggerButton as ReactElement).props.onClick;\n      if (onClick) onClick();\n    };\n  \n    const alignOptionsMenu = (): void => {\n      const {\n        left: tLeft,\n        right: tRight,\n        bottom: tBottom,\n        top: tTop\n      } = triggerRef.current.getBoundingClientRect();\n      const { right: oRight } = optionsRef.current.getBoundingClientRect();\n  \n      const heightAboveTrigger = tBottom;\n      const heightBelowTrigger = window.innerHeight - tTop;\n      const optionsHeight = optionsRef.current.scrollHeight;\n      const optionIsTallerThanWindow = optionsHeight > window.innerHeight;\n      const displayOptionsBelowTrigger = optionsHeight <= heightBelowTrigger;\n      const displayOptionsAboveTrigger = optionsHeight < heightAboveTrigger;\n      const optionsIsCutoffAtRight =\n        oRight + UNKNOWN_RIGHT_OFFSET_PERCENTAGE * document.body.clientWidth >\n        document.body.clientWidth;\n      const optionsTransformOrigin = [0, 0];\n      const properties: CSSProperties = {};\n  \n      if (optionIsTallerThanWindow) {\n        properties.top = 0;\n        properties.bottom = 0;\n        properties.overflow = \"auto\";\n  \n        if (optionsIsCutoffAtRight) {\n          optionsTransformOrigin[0] = 100;\n          properties.right = document.body.clientWidth - tRight;\n        } else {\n          optionsTransformOrigin[0] = 0;\n          properties.left = tLeft;\n        }\n      } else {\n        if (optionsIsCutoffAtRight) {\n          optionsTransformOrigin[0] = 100;\n          properties.right = document.body.clientWidth - tRight;\n        } else {\n          optionsTransformOrigin[0] = 0;\n          properties.left = tLeft;\n        }\n  \n        if (displayOptionsBelowTrigger) {\n          properties.top = tTop;\n          optionsTransformOrigin[1] = 0;\n        } else if (displayOptionsAboveTrigger) {\n          properties.bottom = window.innerHeight - tBottom;\n          optionsTransformOrigin[1] = 100;\n        }\n      }\n  \n      properties.transformOrigin = `${optionsTransformOrigin[0]}% ${optionsTransformOrigin[1]}%`;\n      setOptionsCssProperties(properties);\n    };\n  \n    useEffect(() => {\n      const onScroll = (): void => {\n        setOptionsOpened(false);\n      };\n  \n      if (optionsOpened) {\n        window.addEventListener(\"scroll\", onScroll);\n        document.addEventListener(\"scroll\", onScroll);\n        document.body.addEventListener(\"scroll\", onScroll);\n      }\n  \n      return () => {\n        window.removeEventListener(\"scroll\", onScroll);\n        document.removeEventListener(\"scroll\", onScroll);\n        document.body.removeEventListener(\"scroll\", onScroll);\n      };\n    }, [optionsOpened]);\n  \n    useEffect(() => {\n      if (optionsOpened && optionsRef.current) {\n        if (!firstAlignmentPass) setFirstAlignmentPass(true);\n        alignOptionsMenu();\n      } else {\n        setOptionsCssProperties(null);\n        setFirstAlignmentPass(false);\n      }\n    }, [optionsOpened]);\n  \n    useEffect(() => {\n      if (firstAlignmentPass) {\n        alignOptionsMenu();\n      }\n    }, [firstAlignmentPass]);\n  \n    return (\n      <React.Fragment>\n        {cloneElement(triggerButton as ReactElement, {\n          ref: triggerRef,\n          onClick: toggle\n        })}\n  \n        {optionsOpened && <PopupMenuScrim onClick={toggle} />}\n  \n        {optionsOpened && optionsMenu && (\n          <PopupMenuOptions\n            ref={optionsRef}\n            // OnClick is set if optionsMenu is not a function\n            onClick={optionsMenuIsFunction ? null : toggle}\n            style={optionsCssProperties}>\n            {optionsMenuIsFunction\n              ? optionsMenu(() => setOptionsOpened(false))\n              : optionsMenu}\n          </PopupMenuOptions>\n        )}\n      </React.Fragment>\n    );\n  };\n  "],"names":[],"sourceRoot":""}