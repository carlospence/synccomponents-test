{"version":3,"file":"components-MultiStateButton-MultiStateButton-stories.c4863ba3.iframe.bundle.js","mappings":";;;;;;;;;AAkCA;;;;;;;AAaA;;;;;;;AASA;;;;;;;AASA;;;;;;;;AAYA;;;AAQA","sources":["webpack://@carlospence/synccomponents-test/./src/components/MultiStateButton/MultiStateButton.tsx"],"sourcesContent":["import React, {useState, forwardRef, useImperativeHandle} from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { MultiStateButtonProps, MultiStateButtonOption, MultiStateButtonOptions, MultiStateButtonElement } from \"./MultiStateButton.types\";\nimport {getOjectValue} from '../../utils/objectUtils'\nimport {isNonEmptyString} from '../../utils/stringUtils'\n\n// const StyledMultiStateButton = styled.button<MultiStateButtonProps>`\n//   border: 0;\n//   line-height: 1;\n//   font-size: 15px;\n//   cursor: pointer;\n//   font-weight: 700;\n//   font-weight: bold;\n//   border-radius: 3px;\n//   display: inline-block;\n//   padding: ${(props) =>\n//     props.size === \"small\"\n//       ? \"7px 25px 8px\"\n//       : props.size === \"medium\"\n//       ? \"9px 30px 11px\"\n//       : \"14px 30px 16px\"};\n\n//   opacity: ${(props) => (props.disabled ? 0.5 : 1)};\n// `;\n\nconst StyledMultiStateButton = styled.button<MultiStateButtonProps>`\n  border: 0;\n  font-size: 15px;\n  cursor: pointer;\n  font-weight: 700;\n  font-weight: bold;\n  border-radius: 3px;\n  display: inline-block;\n  \n  ${({ round, size }) => {\n    if (round){\n      switch (size) {\n        case \"small\":\n          return  css`\n          height: 24px;\n          width: 24px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        `\n          break;\n        case \"medium\":\n          return  css`\n          height: 48px;\n          width: 48px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        `\n        case \"large\":\n          return  css`\n          height: 56px;\n          width: 56px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        `\n        default:\n          return  css`\n          height: 32px;\n          width: 32px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          \n        `\n          break;\n      }\n    }\n  }\n  }\n\n \n`;\n\n\nconst MultiStateButton = React.forwardRef<MultiStateButtonElement, MultiStateButtonProps>(({\n    size,\n    disabled,\n    options = {},\n    defaultOptionKey = \"\",\n    loop = true,\n    preventClick = false,\n    onChange,\n    ...props\n   }: MultiStateButtonProps, ref) => {\n\n      const [currentState, setCurrentState] = useState(() => {\n    if (!isNonEmptyString(defaultOptionKey)){\n      var keys = Object.keys(options);\n      return keys[0]\n    }\n    return defaultOptionKey;\n  })\n\n  const [currentOption, setCurrentOption] = useState(() => {\n    var keys = Object.keys(options);\n    if (keys.length > 0){\n      return options[currentState as keyof MultiStateButtonOptions]\n    }\n    return null\n  })\n\n  const changeState = () => {\n  \n  var keys = Object.keys(options);\n  if (keys.length > 0){\n    let currentIndex = keys.indexOf(currentState);\n    let nextIndex = currentIndex\n    if( currentIndex < keys.length - 1){\n      nextIndex = currentIndex + 1\n    } else {\n      if(loop) {\n        nextIndex = 0\n      }\n    }\n    var nextState = keys[nextIndex]\n    let nextOption = options[nextState as keyof MultiStateButtonOptions];\n    setCurrentOption(nextOption)\n    setCurrentState(nextState);\n    \n    //this.setState({currentState: keys[nextIndex]})\n\n    if (onChange) onChange(nextState, nextOption);\n  }\n}\n\n  React.useImperativeHandle(ref, () => ({\n    // start() has type inferrence here\n    toggle(): MultiStateButtonOption | null {\n      changeState();\n      return currentOption;\n    },\n  }));\n\n    return (\n    <StyledMultiStateButton\n      onClick={() => {\n        if (!preventClick){\n          changeState();\n        }\n      }}\n      disabled={disabled}\n     \n      style={currentOption?.style}\n      size={size}\n      {...props}\n      className={`${props.className} ${currentOption?.class}`} \n      >\n      {options[currentState as keyof MultiStateButtonOptions].iconOrText}\n     {/* Example */}\n    </StyledMultiStateButton>\n  );;\n});\n\n\n\nexport default MultiStateButton;"],"names":[],"sourceRoot":""}