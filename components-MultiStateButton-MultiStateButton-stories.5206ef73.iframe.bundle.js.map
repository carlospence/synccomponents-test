{"version":3,"file":"components-MultiStateButton-MultiStateButton-stories.5206ef73.iframe.bundle.js","mappings":";;;;;;;;;AAmCA;;;;;;;AAaA;;;;;;;AASA;;;;;;;AASA;;;;;;;;AAYA;AAGA;;AAMA;;AAAA;;AA0IA","sources":["webpack://@carlospence/synccomponents-test/./src/components/MultiStateButton/MultiStateButton.tsx"],"sourcesContent":["import React, {useState, useEffect, forwardRef, useImperativeHandle} from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { MultiStateButtonProps, MultiStateButtonOption, MultiStateButtonOptions, MultiStateButtonElement,\n isMultiStateButtonOption} from \"./MultiStateButton.types\";\nimport {getOjectValue, isEmpty} from '../../utils/objectUtils'\nimport {isNonEmptyString} from '../../utils/stringUtils'\n\n// const StyledMultiStateButton = styled.button<MultiStateButtonProps>`\n//   border: 0;\n//   line-height: 1;\n//   font-size: 15px;\n//   cursor: pointer;\n//   font-weight: 700;\n//   font-weight: bold;\n//   border-radius: 3px;\n//   display: inline-block;\n//   padding: ${(props) =>\n//     props.size === \"small\"\n//       ? \"7px 25px 8px\"\n//       : props.size === \"medium\"\n//       ? \"9px 30px 11px\"\n//       : \"14px 30px 16px\"};\n\n//   opacity: ${(props) => (props.disabled ? 0.5 : 1)};\n// `;\n\nconst StyledMultiStateButton = styled.button<MultiStateButtonProps>`\n  border: 0;\n  font-size: 15px;\n  cursor: pointer;\n  font-weight: 700;\n  font-weight: bold;\n  border-radius: 3px;\n  display: inline-block;\n  \n  ${({ round, size}) => {\n    if (round){\n      switch (size) {\n        case \"small\":\n          return  css`\n          height: 24px;\n          width: 24px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        `\n          break;\n        case \"medium\":\n          return  css`\n          height: 48px;\n          width: 48px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        `\n        case \"large\":\n          return  css`\n          height: 56px;\n          width: 56px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        `\n        default:\n          return  css`\n          height: 32px;\n          width: 32px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          \n        `\n          break;\n      }\n    }\n  }\n  }\n  ${({ visible}) => {\n    if (visible === undefined || visible === true ){\n      return  css`\n      \n    `\n    }\n    if (visible === false ){\n      return  css`\n      display: none !important;\n    `\n    }\n  }\n  }\n \n`;\n\n\nconst MultiStateButtonNext = React.forwardRef<MultiStateButtonElement, MultiStateButtonProps>(({\n    size,\n    disabled,\n    options = {},\n    selectedOption = {},\n    defaultOptionKey = \"\",\n    loop = true,\n    readonly = false,\n    onChange,\n    ...props\n   }: MultiStateButtonProps, ref) => {\n\n      const [currentState, setCurrentState] = useState(() => {\n    if (!isNonEmptyString(defaultOptionKey)){\n      var keys = Object.keys(options);\n      return keys[0]\n    }\n    return defaultOptionKey;\n  })\n\n  const [currentOption, setCurrentOption] = useState(() => {\n    \n    if (!isEmpty(selectedOption)){\n      if (isMultiStateButtonOption(selectedOption)){\n        return selectedOption;\n      }\n    }\n    \n    var keys = Object.keys(options);\n    if (keys.length > 0){\n      return options[currentState as keyof MultiStateButtonOptions]\n    }\n  \n    return null\n  })\n\n  useEffect(() => {\n    if (!isEmpty(selectedOption)){\n      if (isMultiStateButtonOption(selectedOption)){\n        // console.log(\"I have changed\")\n        setCurrentOption(selectedOption)\n      }\n    }\n  }, [selectedOption])\n\n  const changeState = () => {\n  \n  var keys = Object.keys(options);\n  if (keys.length > 0){\n    let currentIndex = keys.indexOf(currentState);\n    if (!isEmpty(selectedOption)){\n      // console.log(\"Got here 0\")\n      if (isMultiStateButtonOption(selectedOption)){\n        // console.log(\"Got here 1\")\n        if (selectedOption?.value !== undefined){\n          currentIndex = keys.indexOf(selectedOption?.value);\n          // console.log(\"Got here 2\")\n        }\n        \n      }\n    }\n    // console.log(currentIndex, \"Current Index\")\n    let nextIndex = currentIndex\n    if( currentIndex < keys.length - 1){\n      nextIndex = currentIndex + 1\n    } else {\n      if(loop) {\n        nextIndex = 0\n      }\n    }\n    // console.log(nextIndex, \"Next Index\")\n    var nextState = keys[nextIndex]\n    let nextOption = options[nextState as keyof MultiStateButtonOptions];\n    if (onChange) {\n      // console.log(\"Throwing Onchange Event\")\n      onChange(nextState, nextOption)\n    };\n\n    if (isEmpty(selectedOption)){\n      setCurrentOption(nextOption)\n      setCurrentState(nextState);\n    }\n   \n    // console.log(nextOption, \"Next Option\", nextState, \"Next State\")\n    return nextOption;\n    //this.setState({currentState: keys[nextIndex]})\n\n  }\n}\n\n  React.useImperativeHandle(ref, () => ({\n    // start() has type inferrence here\n    toggle(): MultiStateButtonOption | null {\n      var result =  changeState();\n      if (result != undefined){\n        return result;\n      }\n      return currentOption;\n    },\n  }));\n\n    return (\n    <StyledMultiStateButton\n      onClick={() => {\n        if (!readonly){\n          changeState();\n        }\n      }}\n      disabled={disabled}\n     \n      style={!isEmpty(selectedOption) && isMultiStateButtonOption(selectedOption) ? selectedOption.style : currentOption?.style}\n      size={size}\n      {...props}\n      className={`${props.className} ${!isEmpty(selectedOption) && isMultiStateButtonOption(selectedOption) ? selectedOption.class: currentOption?.class}`} \n      >\n      {!isEmpty(selectedOption) && isMultiStateButtonOption(selectedOption) ? selectedOption.iconOrText \n      : \n      options[currentState as keyof MultiStateButtonOptions].iconOrText}  \n      {/* {selectedOption.iconOrText } */}\n      {/* {options[currentState as keyof MultiStateButtonOptions].iconOrText} */}\n     {/* Example */}\n    </StyledMultiStateButton>\n  );;\n});\n\n\n\nexport default MultiStateButtonNext;"],"names":[],"sourceRoot":""}